<?php

namespace common\modules\user\backend\controllers;

use backend\controllers\DefaultBackendController;
use common\modules\user\common\models\PasswordNewForm;
use common\modules\user\common\models\UserCreateForm;
use Yii;
use common\models\User;
use common\modules\user\common\models\UserSearch;
use yii\web\ForbiddenHttpException;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * DefaultController implements the CRUD actions for User model.
 */
class DefaultController extends DefaultBackendController
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();

        $behaviors['verbs']['actions'][] = [
            'delete' => ['POST'],
        ];

        return $behaviors;
    }

    public function beforeAction($action)
    {
        if (!Yii::$app->user->can('access-admin')) {
            throw new ForbiddenHttpException();
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all User models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new UserSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single User model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new User model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new UserCreateForm();
        if ($model->load(Yii::$app->request->post())) {
            if ($user = $model->signup()) {
                return $this->redirect(['view', 'id' => $user->id]);
            }
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing User model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $password = new PasswordNewForm();

        if ($password->load(Yii::$app->request->post()) && $password->validate()) {
            $model->setPassword($password->password);
            if ($model->save()) {
                Yii::$app->session->setFlash('global', [
                    'class' => 'success',
                    'message' => 'Пароль пользователя успешно изменен'
                ]);
            } else {
                Yii::$app->session->setFlash('global', [
                    'class' => 'danger',
                    'message' => 'Не удалось изменить пароль'
                ]);
            }
            return $this->redirect(['update', 'id' => $model->id]);
        }

        if ($model->load(Yii::$app->request->post())) {
            if ($model->save()) {
                Yii::$app->session->setFlash('global', [
                    'class' => 'success',
                    'message' => 'Учетная запись успешно изменена'
                ]);
            } else {
                Yii::$app->session->setFlash('global', [
                    'class' => 'danger',
                    'message' => 'Не удалось сохранить изменения'
                ]);
            }
            return $this->redirect(['update', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model'       => $model,
            'password'    => $password,
        ]);
    }

    /**
     * Deletes an existing User model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $model = $this->findModel($id);
        $model->status = User::STATUS_DELETED;
        $model->save();
        return $this->redirect(['view', 'id' => $model->id]);
    }

    /**
     * Restores access for an existing User model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionRestore($id)
    {
        $model = $this->findModel($id);
        $model->status = User::STATUS_ACTIVE;
        $model->save();
        return $this->redirect(['view', 'id' => $model->id]);
    }

    /**
     * Finds the User model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return User the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = User::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
